buildscript {
	ext {
		springBootVersion = '2.4.0-SNAPSHOT'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '2.4.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'groovy'
	id 'com.palantir.docker' version '0.19.2'
	id 'com.avast.gradle.docker-compose' version "0.12.1"
	id 'jacoco'
	id 'org.sonarqube' version '3.0'
}

bootJar {
	archiveBaseName = 'assignment-helmes'
	archiveVersion = '1.0'
	archiveExtension = 'jar'
	archiveFileName = "${archiveBaseName.get()}-${archiveVersion.get()}.${archiveExtension.get()}"
}
// Used by 'Spring Boot Gradle Plugin' in combination with 'Devtools' makes HTML/JS/CSS reloadable.
bootRun {
	sourceResources sourceSets.main
}

group = 'ee.helmes'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11' // 14

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	jcenter()
}

dependencies {
	// SPRING-BOOT:
	// compile('org.springframework.boot:spring-boot-starter')
	implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
	developmentOnly("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}")
	// LOMBOK ANNOTATIONS:
	compileOnly("org.projectlombok:lombok:1.18.12")
	annotationProcessor("org.projectlombok:lombok:1.18.12")
	testImplementation("org.projectlombok:lombok:1.18.12")
	testAnnotationProcessor("org.projectlombok:lombok:1.18.12")
	// DATABASE
	//runtimeOnly 'com.h2database:h2:1.4.200' // DELETE?
	implementation('org.postgresql:postgresql:42.2.12')
	implementation('com.vladmihalcea:hibernate-types-52:2.9.12')
	// DATABASE CHANGELOGS
	implementation('org.liquibase:liquibase-core:4.0.0')
	// UTILS
	implementation("org.apache.commons:commons-lang3:3.10")
	// implementation("commons-io:commons-io:2.7")
	// LOGGING
	implementation("log4j:log4j:1.2.17")
	implementation("org.codehaus.groovy:groovy-all:3.0.4")
	implementation("org.slf4j:slf4j-api:1.7.30")

	// implementation("javax.xml.bind:jaxb-api:2.3.1")
	// implementation("javax.xml.stream:stax-api:1.0-2")
	implementation("javax.validation:validation-api:2.0.1.Final")
	implementation("org.springdoc:springdoc-openapi-ui:1.4.0")
	implementation("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")

	testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0-M1")
	testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

test {
	useJUnitPlatform()
}

// build.gradle
sonarqube {
	properties {
		property 'sonar.host.url', 'http://localhost:9000'
		property "sonar.projectKey", "assignment-helmes-backend"
		property "sonar.projectName", "Assignment helmes backend"
		property "sonar.projectVersion", "1.0"
		property "sonar.sources", "src/main"
		property "sonar.tests", "src/test"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/test/jacocoTestReport.xml"
	}
}
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.enabled true
	}
}