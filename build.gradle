plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'groovy'
	id 'com.palantir.docker' version '0.25.0'
	id 'com.avast.gradle.docker-compose' version '0.13.3'
	id 'jacoco'
	id 'org.sonarqube' version '3.0'
}

bootJar {
	archiveBaseName = 'assignment-helmes'
	archiveVersion = '1.0'
	archiveExtension = 'jar'
	archiveFileName = "${archiveBaseName.get()}-${archiveVersion.get()}.${archiveExtension.get()}"
}
// Used by 'Spring Boot Gradle Plugin' in combination with 'Devtools' makes HTML/JS/CSS reloadable.
bootRun {
	sourceResources sourceSets.main
}

group = 'ee.helmes'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	jcenter()
}

dependencies {
	// SPRING-BOOT:
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	developmentOnly('org.springframework.boot:spring-boot-devtools')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-data-rest')
	// LOMBOK ANNOTATIONS:
	compileOnly('org.projectlombok:lombok:1.18.12')
	annotationProcessor('org.projectlombok:lombok:1.18.12')
	testImplementation('org.projectlombok:lombok:1.18.12')
	testAnnotationProcessor('org.projectlombok:lombok:1.18.12')
	// DATABASE:
	runtimeOnly('com.h2database:h2')
	// DATABASE CHANGELOGS:
	implementation('org.liquibase:liquibase-core:4.0.0')
	// UTILS:
	implementation('org.apache.commons:commons-lang3:3.10')
	implementation('org.apache.commons:commons-collections4:4.4')
	// implementation('commons-io:commons-io:2.7')
	// LOGGING:
	implementation('log4j:log4j:1.2.17')
	implementation('org.slf4j:slf4j-api:1.7.30')
	// CONFIGURATION PROCESSOR:
	implementation('org.springframework.boot:spring-boot-configuration-processor')
	annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
	// VALIDATIONS:
	compile('javax.validation:validation-api:2.0.1.Final')
	// SWAGGER (OPENAPI 3):
	implementation("org.springdoc:springdoc-openapi-ui:1.4.6")
	// TESTS:
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.0')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	runtimeOnly 'com.h2database:h2:1.4.200'
	// For testing validations:
	testImplementation('org.hibernate.validator:hibernate-validator:6.1.5.Final')
}

test {
	useJUnitPlatform()
}

// SONARQUBE AND JACOCO TEST RAPORTS:

sonarqube {
	properties {
		property 'sonar.host.url', 'http://localhost:9000'
		property "sonar.projectKey", "assignment-helmes-backend"
		property "sonar.projectName", "Assignment Helmes backend"
		property "sonar.projectVersion", "1.0"
		property "sonar.sources", "src/main"
		property "sonar.tests", "src/test"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/test/jacocoTestReport.xml"
	}
}
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.enabled true
	}
}